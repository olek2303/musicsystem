name: Music Review System Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - musicsystem/**
      - docker/backend/**
      - .github/workflows/pipeline-backend.yaml
      - 'compose.yaml'
  pull_request:
    branches:
      - main

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile project
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Compile project
        run: |
          cd musicsystem
          ./mvnw clean compile

  unit-test:
    runs-on: ubuntu-latest
    name: Run unit tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Run unit tests
        run: |
          cd musicsystem
          ./mvnw clean test

  build:
    runs-on: ubuntu-latest
    name: Build project
    needs: [compile, unit-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Build project
        run: |
          cd musicsystem
          ./mvnw clean package

  docker-build:
    runs-on: ubuntu-latest
    name: Build Docker image
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Create fireCred.json from secret
        run: echo "${{ secrets.FIRECRED_JSON }}" > musicsystem/fireCred.json
      - name: Set up Docker Buildx
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker buildx create --use --name mybuilder
          docker buildx inspect --bootstrap
      - name: Build Docker image
        run: |
          docker buildx build --build-arg PROFILE=dev --build-arg APP_VERSION=1.0.1 --file musicsystem/docker/backend/Dockerfile --platform linux/amd64,linux/arm64 --tag ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:latest --tag ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:1.0.1 --push .
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Docker Swarm
    needs: [docker-build]
    steps:
      - name: Create Deployment Folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p /home/${{ secrets.VPS_USERNAME }}/ci-cd"
      - name: Copy docker-compose file
        run: scp compose.yaml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/home/${{ secrets.VPS_USERNAME }}/ci-cd/compose.yaml
      - name: Set ENV variables and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          export EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOSTNAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd /home/${{ secrets.VPS_USERNAME }}/ci-cd
          docker-compose -f musicsystem/compose.yaml pull -q 
          docker-compose -f musicsystem/compose.yaml up -d
          EOF
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Deploy to Docker Swarm
        run: |
          docker stack deploy -c musicsystem/compose.yaml music-review-system-backend
