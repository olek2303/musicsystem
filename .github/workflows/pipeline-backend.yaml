name: Music Review System Backend CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - musicsystem/**
      - docker/backend/**
      - .github/workflows/pipeline-backend.yaml
      - 'compose.yaml'
  pull_request:
    branches:
      - main

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Compile Backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Compile project
        run: |
          cd musicsystem
          ./mvnw clean compile

  unit-test:
    runs-on: ubuntu-latest
    name: Run Backend Unit Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Run Backend Unit Tests
        run: |
          cd musicsystem
          ./mvnw clean test

  build:
    runs-on: ubuntu-latest
    name: Build Backend
    needs: [compile, unit-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Build Backend
        run: |
          cd musicsystem
          ./mvnw clean package

  docker-build:
    runs-on: ubuntu-latest
    name: Build Docker image
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17
      - name: Set execute permissions for mvnw
        run: chmod +x musicsystem/mvnw
      - name: Create fireCred.json from secret
        run: echo "${{ secrets.FIRECRED_JSON }}" > musicsystem/fireCred.json
      - name: Extract project version
        id: extract_version
        run: |
          cd musicsystem
          VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      - name: Debug version
        run: |
          echo "Extracted version: ${{ steps.extract_version.outputs.VERSION }}"
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        run: |
          cd musicsystem
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:latest -f docker/backend/Dockerfile .
      - name: Push Docker image
        run: |
          cd musicsystem
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:latest
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:latest ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:${{ steps.extract_version.outputs.VERSION }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/musicsystem:${{ steps.extract_version.outputs.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Backend to Docker Swarm
    needs: [docker-build]
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts
      - name: Create Deployment Folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p /home/${{ secrets.VPS_USERNAME }}/ci-cd"
      - name: Copy docker-compose file
        run: scp compose.yaml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/home/${{ secrets.VPS_USERNAME }}/ci-cd/compose.yaml
      - name: Set ENV variables and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          export EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOSTNAME }}
          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd /home/${{ secrets.VPS_USERNAME }}/ci-cd
          docker-compose -f compose.yaml pull -q
          docker-compose -f compose.yaml up -d
          EOF
